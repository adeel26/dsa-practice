Compiler
Translates the entire source code into machine code at once.
Produces an executable file (like .exe or .class).
Runs faster after compilation because translation is already done.
Shows all errors after compiling.
Examples: C, C++, Java (bytecode level)

Interpreter
Translates and executes line by line.
Does not produce a separate file â€” runs directly.
Runs slower, since translation happens during execution.
Stops at the first error it finds.
Examples: Python, JavaScript, Ruby

ðŸ§  In short:
Compiler = Translate first, run later.
Interpreter = Translate and run together.
---------------------------------------------------------------------------

Javaâ€™s Case
Uses both:
javac (compiler) â†’ Converts code to bytecode (.class file).
java (interpreter/JVM) â†’ Runs the bytecode line by line on the Java Virtual Machine.

Hereâ€™s the breakdown:

javac â†’ Java Compiler
Converts your .java source file into bytecode (.class file).
Example:
javac MyProgram.java
â†’ produces MyProgram.class.

java â†’ Java Interpreter / JVM launcher
Runs the compiled bytecode using the Java Virtual Machine (JVM).
Example:
java MyProgram
â†’ runs the MyProgram.class file.


So:
ðŸ§  .java â†’ (compiled by javac) â†’ .class â†’ (executed by java)
